# -*- coding: utf-8 -*-
"""allele_UV_visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akP22piOkayUk0ieZhhBW9dPLe92kghC
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Import required packages
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress

# Set file path -- edit as needed
filePath = "/content/drive/MyDrive/*MS Biological Data Science*/*LSC585:586 Capstone/Datasets/merged_allele_uv_data.csv"

# Load dataframe from file
allele_uv_data = pd.read_csv(filePath)

# Drop rows with missing UV index values
allele_uv_clean = allele_uv_data.dropna(subset=["Annual_UV_Index"])

# Compute R-squared values
slope_AA, intercept_AA, r_value_AA, _, _ = linregress(allele_uv_clean["Annual_UV_Index"], allele_uv_clean["AA_Freq"])
slope_A, intercept_A, r_value_A, _, _ = linregress(allele_uv_clean["Annual_UV_Index"], allele_uv_clean["A_Freq"])

# Create scatter plots for AA_Freq and A_Freq
fig, ax = plt.subplots(1, 2, figsize=(12, 5), sharex=True, sharey=True)

sns.regplot(data=allele_uv_clean, x="Annual_UV_Index", y="AA_Freq", ax=ax[0], scatter_kws={"s": 50}, line_kws={"color": "skyblue"})
ax[0].set_title(f"AA Frequency vs. UV Index (R²={r_value_AA**2:.2f})")
ax[0].set_ylabel("AA Frequency")
ax[0].set_xlabel("Annual UV Index")

sns.regplot(data=allele_uv_clean, x="Annual_UV_Index", y="A_Freq", ax=ax[1], scatter_kws={"s": 50}, line_kws={"color": "salmon"})
ax[1].set_title(f"A Frequency vs. UV Index (R²={r_value_A**2:.2f})")
ax[1].set_ylabel("A Frequency")
ax[1].set_xlabel("Annual UV Index")

plt.tight_layout()
plt.show()

# Generate heatmap showing correlations between allele and
plt.figure(figsize=(6, 5))
corr_matrix = allele_uv_clean[["AA_Freq", "A_Freq", "Annual_UV_Index"]].corr() #correlation matrix
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5) #
plt.title("Correlation Heatmap: Allele Frequency & UV Index")
plt.show()

# Sort by AA frequency largest to smallest
allele_uv_sorted = allele_uv_clean.sort_values('AA_Freq', ascending=False)

# Pull population names in this order
print(allele_uv_sorted['Population_Name'].tolist())

# Reorder with "Total" being last
pop_order = ['Latin American 1', 'European', 'Other Asian', 'Asian', 'East Asian', 'South Asian', 'Latin American 2', 'African American', 'African', 'African Others', 'Total']

# Generate paired barplot of allele frequencies by population group
allele_freq_melted = allele_uv_sorted.melt(id_vars=["Population_Name"], value_vars=["AA_Freq", "A_Freq"], #transform data from wide to long format
                                          var_name="Allele", value_name="Frequency")
plt.figure(figsize=(10, 6))
sns.barplot(data=allele_freq_melted, x="Population_Name", y="Frequency", hue="Allele", palette=["skyblue","salmon"], dodge=True, order=pop_order)
plt.xticks(rotation=45, ha="right")
plt.ylabel("Proportion")
plt.xlabel("Population")
plt.title("Allele Proportions by Population")
plt.legend(title="Allele", loc='upper left', bbox_to_anchor=(1, 1))
plt.tight_layout()
plt.show()